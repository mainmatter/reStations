
use serde::{de::Error, Deserialize, Serialize};

/// Single record in the [stations.csv](https://raw.githubusercontent.com/trainline-eu/stations/refs/heads/master/stations.csv) database.
#[derive(Debug, Serialize, Default, PartialEq, derive_builder::Builder)]
#[serde(default)]
pub struct StationRecord {
    // TODO figure out exact types for each fields
    // Where necessary, create newtypes that parse and validate the input
    pub id: i64,
    pub name: String,
    pub slug: String,
    pub uic: String,
    pub uic8_sncf: String,
    pub latitude: Option<f32>,
    pub longitude: Option<f32>,
    pub parent_station_id: String,
    pub country: String,
    pub time_zone: String,
    pub is_city: String,
    pub is_main_station: String,
    pub is_airport: String,
    pub is_suggestable: String,
    pub country_hint: String,
    pub main_station_hint: String,
    pub sncf_id: String,
    pub sncf_tvs_id: String,
    pub sncf_is_enabled: String,
    pub entur_id: String,
    pub entur_is_enabled: String,
    pub db_id: String,
    pub db_is_enabled: String,
    pub busbud_id: String,
    pub busbud_is_enabled: String,
    pub distribusion: Id,
    pub flixbus_id: String,
    pub flixbus_is_enabled: String,
    pub cff_id: String,
    pub cff_is_enabled: String,
    pub leoexpress_id: String,
    pub leoexpress_is_enabled: String,
    pub obb_id: String,
    pub obb_is_enabled: String,
    pub ouigo_id: String,
    pub ouigo_is_enabled: String,
    pub trenitalia_id: String,
    pub trenitalia_is_enabled: String,
    pub trenitalia_rtvt_id: String,
    pub trenord_id: String,
    pub ntv_rtiv_id: String,
    pub ntv_id: String,
    pub ntv_is_enabled: String,
    pub hkx_id: String,
    pub hkx_is_enabled: String,
    pub renfe_id: String,
    pub renfe_is_enabled: String,
    pub atoc_id: String,
    pub atoc_is_enabled: String,
    pub benerail_id: String,
    pub benerail_is_enabled: String,
    pub westbahn_id: String,
    pub westbahn_is_enabled: String,
    pub sncf_self_service_machine: String,
    pub same_as: String,
    pub info: Info,
    pub normalised_code: String,
    pub iata_airport_code: String,
}

#[derive(Clone, Debug, Serialize, Default, PartialEq, derive_builder::Builder)]
pub struct Info {
    pub de: String,
    pub en: String,
    pub es: String,
    pub fr: String,
    pub it: String,
    pub nb: String,
    pub nl: String,
    pub cs: String,
    pub da: String,
    pub hu: String,
    pub ja: String,
    pub ko: String,
    pub pl: String,
    pub pt: String,
    pub ru: String,
    pub sv: String,
    pub tr: String,
    pub zh: String,
}

#[derive(Clone, Debug, Serialize, Default, PartialEq, derive_builder::Builder)]
pub struct Id {
    #[builder(setter(strip_option))]
    id: Option<String>,
    #[builder(setter(custom))]
    is_enabled: bool,
}

impl Id {
    pub fn id(&self) -> Option<&String> {
        self.id.as_ref()
    }

    pub fn is_enabled(&self) -> bool {
        self.is_enabled
    }
}

// This builder was generated by `derive_builder`
impl IdBuilder {
    /// Parses the passed `&str`. Maps `"f"` to `false`, `"t"` to `true`, and returns
    /// and error indicating the value is unexpected for other cases.
    fn parse_is_enabled<E: serde::de::Error>(&mut self, enabled: &str) -> Result<(), E> {
        let is_enabled = match enabled {
            "t" => true,
            "f" => false,
            s => {
                return Err(E::invalid_value(
                    serde::de::Unexpected::Str(s),
                    &r#""t" or "f""#,
                ))
            }
        };

        self.is_enabled = Some(is_enabled);

        Ok(())
    }
}

impl<'de> serde::Deserialize<'de> for StationRecord {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        struct StationRecordVisitor;

        impl<'de> serde::de::Visitor<'de> for StationRecordVisitor {
            type Value = StationRecord;

            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(formatter, "A complete station record")
            }

            fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                let mut record = StationRecordBuilder::default();
                let mut distribusion = IdBuilder::default();
                let mut info = InfoBuilder::default();
                
                /*
                   todo add vec for stashed fields
                   - field name
                   - prefix?
                   - value, probably deserialized to  _serde::__private::de::Content or something similar (Vec<u8>?)
                   
                   for each key of map
                    - if it's value is held directly in StationRecord, then just deserialze the value and set it
                    - if not, stash key and value
                
                   for each stashed k-v pair
                    - try to deserialize in each of the structs using some kind of visitor pattern
                    - set the correct field of the record builder with the result
                    
                */
                
                while let Some(field) = map.next_key::<&'de str>()? {
                    match field {
                        "id" => record.id(map.next_value()?).yeet(),
                        "name" => record.name(map.next_value()?).yeet(),
                        "slug" => record.slug(map.next_value()?).yeet(),
                        "uic" => record.uic(map.next_value()?).yeet(),
                        "uic8_sncf" => record.uic8_sncf(map.next_value()?).yeet(),
                        "latitude" => record.latitude(map.next_value()?).yeet(),
                        "longitude" => record.longitude(map.next_value()?).yeet(),
                        "parent_station_id" => record.parent_station_id(map.next_value()?).yeet(),
                        "country" => record.country(map.next_value()?).yeet(),
                        "time_zone" => record.time_zone(map.next_value()?).yeet(),
                        "is_city" => record.is_city(map.next_value()?).yeet(),
                        "is_main_station" => record.is_main_station(map.next_value()?).yeet(),
                        "is_airport" => record.is_airport(map.next_value()?).yeet(),
                        "is_suggestable" => record.is_suggestable(map.next_value()?).yeet(),
                        "country_hint" => record.country_hint(map.next_value()?).yeet(),
                        "main_station_hint" => record.main_station_hint(map.next_value()?).yeet(),
                        "sncf_id" => record.sncf_id(map.next_value()?).yeet(),
                        "sncf_tvs_id" => record.sncf_tvs_id(map.next_value()?).yeet(),
                        "sncf_is_enabled" => record.sncf_is_enabled(map.next_value()?).yeet(),
                        "entur_id" => record.entur_id(map.next_value()?).yeet(),
                        "entur_is_enabled" => record.entur_is_enabled(map.next_value()?).yeet(),
                        "db_id" => record.db_id(map.next_value()?).yeet(),
                        "db_is_enabled" => record.db_is_enabled(map.next_value()?).yeet(),
                        "busbud_id" => record.busbud_id(map.next_value()?).yeet(),
                        "busbud_is_enabled" => record.busbud_is_enabled(map.next_value()?).yeet(),
                        "distribusion_id" => distribusion.id(map.next_value()?).yeet(),
                        "distribusion_is_enabled" => {
                            distribusion.parse_is_enabled(map.next_value()?)?
                        }
                        "flixbus_id" => record.flixbus_id(map.next_value()?).yeet(),
                        "flixbus_is_enabled" => record.flixbus_is_enabled(map.next_value()?).yeet(),
                        "cff_id" => record.cff_id(map.next_value()?).yeet(),
                        "cff_is_enabled" => record.cff_is_enabled(map.next_value()?).yeet(),
                        "leoexpress_id" => record.leoexpress_id(map.next_value()?).yeet(),
                        "leoexpress_is_enabled" => {
                            record.leoexpress_is_enabled(map.next_value()?).yeet()
                        }
                        "obb_id" => record.obb_id(map.next_value()?).yeet(),
                        "obb_is_enabled" => record.obb_is_enabled(map.next_value()?).yeet(),
                        "ouigo_id" => record.ouigo_id(map.next_value()?).yeet(),
                        "ouigo_is_enabled" => record.ouigo_is_enabled(map.next_value()?).yeet(),
                        "trenitalia_id" => record.trenitalia_id(map.next_value()?).yeet(),
                        "trenitalia_is_enabled" => {
                            record.trenitalia_is_enabled(map.next_value()?).yeet()
                        }
                        "trenitalia_rtvt_id" => record.trenitalia_rtvt_id(map.next_value()?).yeet(),
                        "trenord_id" => record.trenord_id(map.next_value()?).yeet(),
                        "ntv_rtiv_id" => record.ntv_rtiv_id(map.next_value()?).yeet(),
                        "ntv_id" => record.ntv_id(map.next_value()?).yeet(),
                        "ntv_is_enabled" => record.ntv_is_enabled(map.next_value()?).yeet(),
                        "hkx_id" => record.hkx_id(map.next_value()?).yeet(),
                        "hkx_is_enabled" => record.hkx_is_enabled(map.next_value()?).yeet(),
                        "renfe_id" => record.renfe_id(map.next_value()?).yeet(),
                        "renfe_is_enabled" => record.renfe_is_enabled(map.next_value()?).yeet(),
                        "atoc_id" => record.atoc_id(map.next_value()?).yeet(),
                        "atoc_is_enabled" => record.atoc_is_enabled(map.next_value()?).yeet(),
                        "benerail_id" => record.benerail_id(map.next_value()?).yeet(),
                        "benerail_is_enabled" => {
                            record.benerail_is_enabled(map.next_value()?).yeet()
                        }
                        "westbahn_id" => record.westbahn_id(map.next_value()?).yeet(),
                        "westbahn_is_enabled" => {
                            record.westbahn_is_enabled(map.next_value()?).yeet()
                        }
                        "sncf_self_service_machine" => {
                            record.sncf_self_service_machine(map.next_value()?).yeet()
                        }
                        "same_as" => record.same_as(map.next_value()?).yeet(),
                        "info:de" => info.de(map.next_value()?).yeet(),
                        "info:en" => info.en(map.next_value()?).yeet(),
                        "info:es" => info.es(map.next_value()?).yeet(),
                        "info:fr" => info.fr(map.next_value()?).yeet(),
                        "info:it" => info.it(map.next_value()?).yeet(),
                        "info:nb" => info.nb(map.next_value()?).yeet(),
                        "info:nl" => info.nl(map.next_value()?).yeet(),
                        "info:cs" => info.cs(map.next_value()?).yeet(),
                        "info:da" => info.da(map.next_value()?).yeet(),
                        "info:hu" => info.hu(map.next_value()?).yeet(),
                        "info:ja" => info.ja(map.next_value()?).yeet(),
                        "info:ko" => info.ko(map.next_value()?).yeet(),
                        "info:pl" => info.pl(map.next_value()?).yeet(),
                        "info:pt" => info.pt(map.next_value()?).yeet(),
                        "info:ru" => info.ru(map.next_value()?).yeet(),
                        "info:sv" => info.sv(map.next_value()?).yeet(),
                        "info:tr" => info.tr(map.next_value()?).yeet(),
                        "info:zh" => info.zh(map.next_value()?).yeet(),
                        "normalised_code" => record.normalised_code(map.next_value()?).yeet(),
                        "iata_airport_code" => record.iata_airport_code(map.next_value()?).yeet(),
                        k => return Err(A::Error::unknown_field(k, &[/* todo */])),
                    };
                }
                let distribusion = distribusion.build().map_err_deser()?;
                record.distribusion(distribusion);

                let info = info.build().map_err_deser()?;
                record.info(info);

                let record = record.build().map_err_deser()?;

                Ok(record)
            }
        }

        deserializer.deserialize_map(StationRecordVisitor)
    }
}

trait ResultExt<T> {
    fn map_err_deser<SE: serde::de::Error>(self) -> Result<T, SE>;
}

impl<T, E: IntoDeserError> ResultExt<T> for Result<T, E> {
    fn map_err_deser<SE: serde::de::Error>(self) -> Result<T, SE> {
        self.map_err(IntoDeserError::into_deser_err)
    }
}

trait IntoDeserError: Sized {
    /// Convert `self` into to a [`serde::de::Error`]
    /// Help making converting generated builder errors less verbose.
    fn into_deser_err<E: serde::de::Error>(self) -> E;
}

macro_rules! into_deser_error_impl {
    ($e:tt) => {
        impl IntoDeserError for $e {
            fn into_deser_err<E: serde::de::Error>(self) -> E {
                match self {
                    $e::UninitializedField(field) => E::missing_field(field),
                    $e::ValidationError(e) => E::custom(e),
                }
            }
        }
    };
}

into_deser_error_impl!(InfoBuilderError);
into_deser_error_impl!(IdBuilderError);
into_deser_error_impl!(StationRecordBuilderError);

trait Yeet {
    /// Drops the value. Makes code less ugly
    fn yeet(self);
}

impl<T> Yeet for T {
    fn yeet(self) {}
}

/*
{
    "things": 123,
    ...
    "busbud_id": "blabla",
    "busbud_enabled": false

}


{
    "things": 123,
    ...
    "busbud": {
        "id": "blabla",
        "enabled": false
    }

}


{
    "things": 123,
    ...

    "id": "blabla",
    "enabled": false

}


*/
